#!/usr/bin/env bash
#
# This script creates an ISO image from a directory and attaches it as a
# virtual CD-ROM to a specified XenServer VM.  The VM needs to be
# runningbecause we depend on xenstore for communication with it.
#
# This script depends on the 'genisoimage' package (usually named
# 'mkisofs' on older systems).
#
# Installation: sudo apt-get update && sudo apt-get install genisoimage
# (Debian/Ubuntu) sudo yum install genisoimage (CentOS/RHEL/Fedora)

if [[ -n "$TRACE" ]]; then set -x; fi
set -euo pipefail # Exit on errors, pipe failures, and unset variables

# --- Usage Information ---
print_usage() {
    cat <<EOF
Usage: $0 VM-UUID path/to/dir

Create an ISO from a directory and make it available as a CD for a VM.
EOF
}

# --- Argument Handling ---
if [[ $# -lt 2 ]]; then
    print_usage
    exit 1
fi

VM="$1"
DIR="$2"

# --- Input Validation ---
X=$(xe vm-list uuid="$VM" power-state=running minimal=true)
if [[ -z "$X" ]]; then
    echo "Error: no running VM with UUID '$VM' found."
    exit 1
fi

if ! [[ -d "$DIR" ]]; then
    echo "Error: Directory '$DIR' does not exist."
    exit 1
fi

# --- ISO Creation ---
now=$(date +%Y%m%d-%H%M%S)
img="config-$VM-$now.iso" # Include timestamp for uniqueness
sr_dir="/var/opt/iso"
mkdir -p "$sr_dir"

echo "Creating ISO image '$sr_dir/$img' from directory '$DIR'..."
if ! genisoimage -r -J -o "$sr_dir/$img" "$DIR"; then
    echo "Error: Failed to create ISO image."
    exit 1
fi
echo "ISO image created successfully."

# --- Storage Repository Handling ---
NAME="CONFIG-$(hostname)"
SR=$(xe sr-list name-label="$NAME" params=uuid minimal=true)

if [[ -z "$SR" ]]; then
    echo "Creating new local ISO SR '$NAME'..."
    SR=$(xe sr-create \
        name-label="$NAME" \
        device-config:location="$sr_dir" \
        device-config:legacy_mode=true \
        type=iso \
        content-type=iso)
    if [[ -z "$SR" ]]; then
        echo "Error: Failed to create Storage Repository."
        exit 1
    fi
    echo "Storage Repository '$NAME' created with UUID: $SR"
else
    echo "Using existing local ISO SR '$NAME' with UUID: $SR"
fi

xe sr-scan uuid="$SR"

# --- Attaching ISO to VM ---
echo "Finding an available virtual CD-ROM drive for VM '$VM'..."
VBD=$(xe vm-cd-list uuid="$VM" minimal=true | tr ',' '\n' | head -1)

if [[ -z "$VBD" ]]; then
    echo "Error: No virtual CD-ROM drive found for VM '$VM'."
    echo "Consider adding one to the VM's configuration."
    exit 1
fi

VDI=$(xe vdi-list name-label="$img" sr-uuid="$SR" minimal=true)

if [[ -z "$VDI" ]]; then
    echo "Error: VDI for ISO '$img' not found in SR '$SR'."
    exit 1
fi

echo "Inserting VDI '$VDI' into VBD '$VBD' for VM '$VM'..."
if ! xe vbd-insert uuid="$VBD" vdi-uuid="$VDI"; then
    echo "Error: Failed to insert ISO into the virtual CD-ROM drive."
    exit 1
fi
echo "ISO image attached to VM '$VM'."

# --- Telling the VM about Sysprep
echo "Notifying VM '$VM' about potential sysprep configuration..."
ID=$(xe vm-list uuid="$VM" params="dom-id" minimal=true)

if [[ -z "$ID" ]]; then
    echo "Warning: Could not retrieve dom-id for VM '$VM'. Sysprep notification skipped."
    exit 1
fi
echo "VM $VM has domain $ID"

# Set VM up so it doesn't auto-restart (so we can eject the CD before it boots back up)
xe vm-param-set uuid="$VM" actions-after-reboot='Destroy'

XS="/local/domain/$ID/control/sysprep"
echo "Writing sysprep filename 'D://unattend.xml' to XenStore path '$XS/filename'"
sleep 5
xenstore-write "$XS/filename" "D://unattend.xml"
echo "Writing sysprep action 'sysprep' to XenStore path '$XS/action'"
sleep 5
xenstore-write "$XS/action" "sysprep"
echo "VM '$VM' notified about sysprep."

echo "Waiting for VM to shutdown."
while true; do
    sleep 1
    if [[ "$(xe vm-param-get uuid="$VM" param-name=power-state)" == "halted" ]]; then
        break
    fi
done

echo "Ejecting ISO from VBD '$VBD' fo VM '$VM'..."
if ! xe vbd-eject uuid="$VBD"; then
    echo "Error: Failed to eject ISO from virtual CD-ROM drive."
    exit 1
fi
echo "ISO ejected from VM '$VM'."

# Restore actions-after-reboot
xe vm-param-set uuid="$VM" actions-after-reboot='Restart'

echo "Starting VM '$VM'."
if ! xe vm-start uuid="$VM"; then
    echo "Error: Failed to start VM."
    exit 1
fi

echo "Cleaning up..."
# Cleanup ISO
rm -f "$sr_dir/$img"
xe sr-scan uuid="$SR"
echo "Done."

echo "Operation completed successfully."
exit 0
